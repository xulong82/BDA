group[sig] = true_pos
x = rep("T_POS", length(spike))
x
x[(! sig) & spike] = "F_NEG"
x[(! sig) & (! spike)] = "T_NEG"
x[(sig) & (! spike)] = "F_POS"
x
boxplot(x)
?boxplot
table(x)
boxplot(sds, x)
boxplot(sds ~ x)
boxplot(split(sds, x))
library(limma)
fit <- lmFit(y, design=model.matrix(~ g))
colnames(coef(fit))
fit[[1]]
length(fit)
coef(fit)
head(coef(fit))
sampleSD = fit$sigma
posteriorSD = sqrt(fit$s2.post)
sampleSD = fit$sigma
posteriorSD = sqrt(fit$s2.post)
fit <- eBayes(fit)
posteriorSD = sqrt(fit$s2.post)
plot(sampleSD, posteriorSD)
abline(0, 1)
mean(sampleSD)
pvals = fit$p.value[,2]
length(pvals)
length(spike)
1 - sum(pvals < 0.01 & spike) / sum(spike)
sum(pvals < 0.01 & spike) / sum(pvals < 0.01)
library(limma)
fit = lmFit(y, design=model.matrix(~ g))
fit = eBayes(fit)
##second coefficient relates to diffences between group
pvals = fit$p.value[,2]
1 - sum(pvals < 0.01 & spike) / sum(spike)
pvals
pvals < 0.01
table(pvals < 0.01)
names(fit)
head(fit$p.value)
pvals = fit$p.value[, 2]
table(pvals < 0.01)
table(spikes)
table(spike)
rowttest(y)
rowttests(y)
y = rowttests(y)
head(y)
table(y[, 3] < 0.01)
y = rowttests(y, g)
g
y <- exprs(rma95)
z = rowttests(y, g)
table(z[, 3] < 0.01)
pvals
all(rownames(pvals) == names(spike))
sum((! pvals < 0.01) & spike)/ sum(pvals < 0.01)
sum((pvals < 0.01) & (! spike))/ sum(pvals < 0.01)
5.3 * 52
?pt
?qr
head(y)
y1 = y[1, ]
y1
g
lm(y1 ~ g)
summary(lm(y1 ~ g))
g
-0.0744 / 0.10605
?mrlm
?rlm
library(MASS)
?rlm
head(y)
rowVars(y)
vars = rowVars(y)
hist(vars)
hist(sqrt(vars))
?seq
seq(0, 1, by = 0.01)
p = seq(0, 1, by = 0.01)
6 * p * (1 - p)
sum(6 * p * (1 - p))
pi = 6 * p * (1 - p)
plot(p, pi)
mean(pi)
head(y)
dim(y)
x = rowVars(y[, 1:3])
x
n = length(x)
n
?pmax
pmax(x)
min(5:1)
pmin(5:1)
pmin(5:1, pi)
pmax(x, 0)
k = rnorm(10)
k
pmax(k, 0)
log(x)
digamma(11/2)
?digamma
log(11/2)
z <- log(x)
e <- z-digamma(df1/2)+log(df1/2)
df1 = 11
e <- z-digamma(df1/2)+log(df1/2)
emean <- mean(e)
evar <- sum((e-emean)^2)/(n-1)
evar <- evar - mean(trigamma(df1/2))
evar
df2 <- 2*trigammaInverse(evar)
s20 <- exp(emean+digamma(df2/2)-log(df2/2))
df2
s20
fitFDist(x, 11)
?sampling
library(rstan)
?sampling
log10
install.packages("ExomeDepth")
library(ExomeDepth)
data(exons.hg19)
head(exons.hg19)
data(ExomeCount)
ExomeCount
colnames(ExomeCount)
ExomeCount.dafr <- as(ExomeCount[, colnames(ExomeCount)], "data.frame")
head(ExomeCount.dafr)
ExomeCount.dafr$chromosome <- gsub(as.character(ExomeCount.dafr$space), "chr", "")
ExomeCount.dafr$chromosome <- gsub(as.character(ExomeCount.dafr$space), pattern = "chr", replacement = "")
head(ExomeCount.dafr)
99e-2
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(GenomicFeatures)
library(org.Hs.eg.db)
library(tidyr)
library(reshape)
library(dplyr)
X = rnorm(1e3, 0, 1)
hist(X)
?sample
x = sample(X, N)
N = 30 # sample size
x = sample(X, N)
Q = qnorm(1 - 0.05/2)
(Q = qnorm(1 - 0.05/2))
(Q = qnorm(1 - 0.05/2))
c(mean(x) - Q*se, mean(x) + Q*se)
se = sd(x) / sqrt(N)
c(mean(x) - Q*se, mean(x) + Q*se)
plot(0, 0, xlim = c(-5, 5), ylim = c(1, 100))
for(i in 1:100) {
x = sample(X, N)
se = sd(x) / sqrt(N)
interval = c(mean(x) - Q*se, mean(x) + Q*se)
mycol = ifelse(min(interval) < 0 & max(interval) > 0, 1, 2)
lines(interval, c(i, i), col = mycol)
}
plot(0, 0, xlim = c(-2, 2), ylim = c(1, 100))
for(i in 1:100) {
x = sample(X, N)
se = sd(x) / sqrt(N)
interval = c(mean(x) - Q*se, mean(x) + Q*se)
mycol = ifelse(min(interval) < 0 & max(interval) > 0, 1, 2)
lines(interval, c(i, i), col = mycol)
}
plot(0, 0, xlim = c(-2, 2), ylim = c(1, 100))
for(i in 1:100) {
x = sample(X, N)
se = sd(x) / sqrt(N)
interval = c(mean(x) - Q*se, mean(x) + Q*se)
mycol = ifelse(min(interval) < 0 & max(interval) > 0, 1, 2)
lines(interval, c(i, i), col = mycol)
}
plot(0, 0, xlim = c(-2, 2), ylim = c(1, 100))
for(i in 1:100) {
x = sample(X, N)
se = sd(x) / sqrt(N)
interval = c(mean(x) - Q*se, mean(x) + Q*se)
mycol = ifelse(min(interval) < 0 & max(interval) > 0, 1, 2)
lines(interval, c(i, i), col = mycol)
}
py = 0.5 * 0.5^3
Py = 0.5 * 0.5^3 + 0.5 * 1
py/Py
Py = 0.2 * 1 + 0.8 * 0
plot(0, 0, xlim = c(-1, 1), ylim = c(1, 100))
for(i in 1:100) {
x = sample(X, N)
se = sd(x) / sqrt(N)
interval = c(mean(x) - Q*se, mean(x) + Q*se)
mycol = ifelse(min(interval) < 0 & max(interval) > 0, 1, 2)
lines(interval, c(i, i), col = mycol)
}
plot(xlim = c(-1, 1), ylim = c(1, 100))
plot(x = 0, y = 0, xlim = c(-1, 2), ylim = c(1, 100))
plot(0, 0, xlim = c(-1, 1), ylim = c(1, 100), xlab = "value", ylab = "index")
for(i in 1:100) {
x = sample(X, N)
se = sd(x) / sqrt(N)
interval = c(mean(x) - Q*se, mean(x) + Q*se)
mycol = ifelse(min(interval) < 0 & max(interval) > 0, 1, 2)
lines(interval, c(i, i), col = mycol)
}
Pp = 3.12e-7 * 0.975
Py = 3.12e-7 * 0.975 + 7.6e-5 * 0.00193 + 6.05e-6 * 0.000143
Pp / Py
Pp = 7.6e-5 * 0.00193
Pp / Py
Pp = 6.05e-6 * 0.000143
Pp / Py
Pp = 3.12e-7 * 0.975
Pp / Py
library(dplyr)
library(ggplot2)
setwd("~/Dropbox/GitHub/Adsp")
load("data/mdata.rdt")
load("data/glmList.rdt")
gwas_select <- filter(glmList$gwas, LOD > 15 & CHR %in% c(1:22))
geno_select <- glmList$geno_select
all(colnames(geno_select) == mdata$SRR)
effect_add <- sweep(geno_select, 1, gwas_select$pSnp, "*")
mdata$Add <- colSums(effect_add)
summary(mdata$Add)
summary(gwas_select$pSnp)
ggplot(mdata, aes(x = AD2, y = Add, colour = AD2)) +
geom_boxplot(outlier.shape = NA) +
geom_point(position = position_jitter(width = 0.3))
geno_def = geno_select[, mdata$AD2 == "Definite"]
geno_indef = geno_select[, mdata$AD2 != "Definite"]
which(rowSums(geno_def) & ! rowSums(geno_indef)) # no one only in definite category
head(geno_def)
cor(mdata$Add, mdata$AD1) # additive? interactive?
ggplot(mdata, aes(x = AD2, y = Add, colour = AD2)) +
geom_boxplot(outlier.shape = NA) +
geom_point(position = position_jitter(width = 0.3))
col.ad4 <- c("#1f78b4", "#b2df8a", "#33a02c", "#fb9a99")
ggplot(mdata, aes(x = AD2, y = Add, colour = AD2)) +
geom_boxplot(outlier.shape = NA) +
geom_point(position = position_jitter(width = 0.3)) +
theme_bw() + xlab("") + ylab("")  + coord_flip() +
scale_fill_manual(values = col.ad4)
ggplot(mdata, aes(x = AD2, y = Add, colour = AD2)) +
geom_boxplot(outlier.shape = NA) +
geom_point(position = position_jitter(width = 0.3)) +
theme_bw() + xlab("") + ylab("") +
scale_fill_manual(values = col.ad4) +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
legend.text = element_text(size = 12),
legend.title = element_blank(),
legend.key = element_blank())
mycol <- c("grey70", "dodgerblue3", "chartreuse3", "firebrick1")
ggplot(mdata, aes(x = AD2, y = Add, colour = AD2)) +
geom_boxplot(outlier.shape = NA) +
geom_point(position = position_jitter(width = 0.3)) +
theme_bw() + xlab("") + ylab("") +
scale_fill_manual(values = mycol) +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
legend.text = element_text(size = 12),
legend.title = element_blank(),
legend.key = element_blank())
pdf("Pdf/additive.pdf", width = 7, height = 7)
mycol <- c("grey70", "dodgerblue3", "chartreuse3", "firebrick1")
ggplot(mdata, aes(x = AD2, y = Add, colour = AD2)) +
geom_boxplot(outlier.shape = NA) +
geom_point(position = position_jitter(width = 0.3)) +
theme_bw() + xlab("") + ylab("") +
scale_fill_manual(values = mycol) +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
legend.text = element_text(size = 12),
legend.title = element_blank(),
legend.key = element_blank())
dev.off()
pdf("Pdf/additive.pdf", width = 7, height = 5)
mycol <- c("grey70", "dodgerblue3", "chartreuse3", "firebrick1")
ggplot(mdata, aes(x = AD2, y = Add, colour = AD2)) +
geom_boxplot(outlier.shape = NA) +
geom_point(position = position_jitter(width = 0.3)) +
theme_bw() + xlab("") + ylab("") +
scale_fill_manual(values = mycol) +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
legend.text = element_text(size = 12),
legend.title = element_blank(),
legend.key = element_blank())
dev.off()
x = seq(-100, 100)
x
y_logit <- exp(x) / (1 + exp(x))
?rnorm
qnorm(1)
y_probit <- pnorm(x)
plot(x, y_logit)
lines(x, y_probit, col = "red")
cor(y_logit, y_probit)
plot(y_logit, x)
plot(y_logit, x, type = "l")
lines(y_probit, x, col = "red")
x = seq(-10, 10)
y_logit <- exp(x) / (1 + exp(x))
y_probit <- pnorm(x)
cor(y_logit, y_probit)
plot(x, y_logit)
lines(x, y_probit, col = "red")
plot(y_logit, x, type = "l")
lines(y_probit, x, col = "red")
x = seq(-1, 1)
y_logit <- exp(x) / (1 + exp(x))
y_probit <- pnorm(x)
plot(y_logit, x, type = "l")
lines(y_probit, x, col = "red")
x = seq(-5, 5)
y_logit <- exp(x) / (1 + exp(x))
y_probit <- pnorm(x)
plot(y_logit, x, type = "l")
lines(y_probit, x, col = "red")
plot(x, y_logit, type = "l")
lines(x, y_probit, col = "red")
?seq
x = seq(0, 5, by = 0.01)
x
cdf = 1 - exp(-x)
plot(x, cdf, type = "l")
runif()
runif(10)
dunif()
dunif(0.4)
runif(1)
lapply(1e3, function(x) {
u = runif(1)
-log(1 - u)
})
v = lapply(1:1e3, function(x) {
u = runif(1)
-log(1 - u)
})
v = sapply(1:1e3, function(x) {
u = runif(1)
-log(1 - u)
})
hist(v)
plot(density(v))
hist(v)
hist(v, n = 100)
hist(rnorm(1e3))
hist(rnorm(1e3), n = 100)
?rd
?rt
hist(rnorm(1e3), n = 100)
hist(rt(1e3, 7), n = 100)
hist(rnorm(1e3), n = 100, xlim = c(-3, 3))
hist(rt(1e3, 7), n = 100, xlim = c(-3, 3))
hist(rnorm(1e3), n = 100, xlim = c(-5, 5))
hist(rt(1e3, 7), n = 100, xlim = c(-5, 5))
library ("rstan")
getwd()
setwd("../BDA")
setwd("./worldcup")
read.table ("soccerpowerindex.txt", header=FALSE)
unlist (read.table ("soccerpowerindex.txt", header=FALSE))
as.vector (unlist (read.table ("soccerpowerindex.txt", header=FALSE)))
teams <- as.vector (unlist (read.table ("soccerpowerindex.txt", header=FALSE)))
teams
nteams <- length(teams)
prior_score <- rev(1:nteams)
prior_score
prior_score <- (prior_score - mean(prior_score))/(2*sd(prior_score))
prior_score
var(prior_score)
hist(prior_score)
data2012 <- read.table ("worldcup2012.txt", header=FALSE)
head(data2012)
nrow(data2012)
ngames <- nrow (data2012)
data2012[[1]]
as.vector(data2012[[1]])
teams
match (as.vector(data2012[[1]]), teams)
team2 <- match (as.vector(data2012[[3]]), teams)
score1 <- as.vector(data2012[[2]])
score2 <- as.vector(data2012[[4]])
df <- 7
data <- c("nteams","ngames","team1","score1","team2","score2","prior_score","df")
team1
team1
team1 <- match (as.vector(data2012[[1]]), teams)
team1
data2012
stan_run <- function(stanModel, ...) {
if(class(stanModel) == "stanfit") {
stanExe <- stanModel
} else {
stanModel.rda <- gsub("stan$", "rda", stanModel)
if(!file.exists(stanModel.rda) || file.info(stanModel.rda)$mtime < file.info(stanModel)$mtime) {
cat("Model",stanModel,"needs recompilation.\n")
args <- modifyList(list(...), list(file=stanModel, iter=0, warmup=0, chains=0))
stanExe <- do.call(stan, args)
saveRDS(stanExe, file=stanModel.rda)
} else {
cat("Loading cached stan model", stanModel, ".\n")
stanExe = readRDS(stanModel.rda)
}
}
# This bit with the seed is for debugging purposes; once we figure out why Stan is crashing R we can remove it.
seed <- sample.int(.Machine$integer.max, 1)
write (seed, file="stan_seed.txt")
stan(fit=stanExe, seed=seed, ...)
}
?readRDS
fit <- stan("worldcup.stan", data=data, chains=4, iter=2000)
print(fit)
print(fit)
fit <- stan("worldcup_matt.stan", data=data, chains=4, iter=100)
print(fit)
sims <- extract(fit)
head(sims)
dim(sims)
nrow(sims)
str(sims)
a_sims <- sims$a
head(a_sims)
a_hat <- colMeans(a_sims)
a_se <- sqrt(colVars(a_sims))
a_hat
print(fit)
a_se <- sqrt(colVars(a_sims))
colVars <- function(a) {n <- dim(a)[[1]]; c <- dim(a)[[2]];
return(.colMeans(((a - matrix(.colMeans(a, n, c), nrow = n, ncol = c, byrow = TRUE)) ^ 2), n, c) * n / (n - 1))}
a_se <- sqrt(colVars(a_sims))
a_se
?.colMeans
matrix(.colMeans(a, n, c), nrow = n, ncol = c, byrow = TRUE)
library ("arm")
coefplot (rev(a_hat), rev(a_se), CI=1, varnames=rev(teams), main="Team quality (estimate +/- 1 s.e.)\n", cex.var=.9, mar=c(0,4,5.1,2), xlim=c(-.5,.5))
a_hat
print(fit)
a_sims <- sims$eta_a
a_hat <- colMeans(a_sims)
a_se <- sqrt(colVars(a_sims))
coefplot (rev(a_hat), rev(a_se), CI=1, varnames=rev(teams), main="Team quality (estimate +/- 1 s.e.)\n", cex.var=.9, mar=c(0,4,5.1,2), xlim=c(-.5,.5))
fit_noprior <- stan_run("worldcup_noprior_matt.stan", data=data, chains=4, iter=1000)
worldcup_plot <- function (fit){
sims <- extract(fit)
a_sims <- sims$a
a_hat <- colMeans(a_sims)
a_se <- sqrt(colVars(a_sims))
coefplot (rev(a_hat), rev(a_se), CI=1, varnames=rev(teams), main="Team quality (estimate +/- 1 s.e.)\n", cex.var=.9, mar=c(0,4,5.1,2), xlim=c(-.5,.5))
}
worldcup_plot(fit_noprior)
sims <- extract (fit)
a_sims <- sims$a
a_hat <- colMeans(a_sims)
a_se <- sqrt(colVars(a_sims))
a_hat
expected_on_sqrt_scale <- a_hat[team1] - a_hat[team2]
sigma_y_sims <- sims$sigma_y
sigma_y_sims
df
qt(.975,df)
interval_975 <- median(qt(.975,df)*sigma_y_sims)
signed_square <- function (a) {sign(a)*a^2}
lower <- signed_square(expected_on_sqrt_scale - interval_975)
upper <- signed_square(expected_on_sqrt_scale + interval_975)
coefplot (rev(score1 - score2), sds=rep(0, ngames),
lower.conf.bounds=rev(lower), upper.conf.bounds=rev(upper),
varnames=rev(paste(teams[team1], "vs.", teams[team2])),
main="Game score differentials\ncompared to 95% predictive interval from model\n",
mar=c(0,7,6,2))
?rt
rt(ngames,df)
fit <- stan_run("worldcup_matt.stan", data=data, chains=4, iter=5000)
print(fit)
sims <- extract (fit)
a_sims <- sims$a
sigma_y_sims <- sims$sigma_y
nsims <- length(sigma_y_sims)
nsims
random_outcome <- array(NA, c(nsims,ngames))
head(random_outcome)
(a_sims[s,team1] - a_sims[s,team2])
s = 1
(a_sims[s,team1] - a_sims[s,team2])
rt(ngames,df)*sigma_y_sims[s]
for (s in 1:nsims){
random_outcome_on_sqrt_scale <- (a_sims[s,team1] - a_sims[s,team2]) + rt(ngames,df)*sigma_y_sims[s]
random_outcome[s,] <- signed_square(random_outcome_on_sqrt_scale)
}
sim_quantiles <- array(NA,c(ngames,2))
for (i in 1:ngames){
sim_quantiles[i,] <- quantile(random_outcome[,i], c(.025,.975))
}
sim_quantiles
coefplot (rev(score1 - score2), sds=rep(0, ngames),
lower.conf.bounds=rev(sim_quantiles[,1]), upper.conf.bounds=rev(sim_quantiles[,2]),
varnames=rev(paste(teams[team1], "vs.", teams[team2])),
main="Game score differentials\ncompared to 95% predictive interval from model\n",
mar=c(0,7,6,2))
